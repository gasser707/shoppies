{"version":3,"sources":["components/UI/Buttons/GradientButton/GradientButton.module.css","components/Input/Input.module.css","components/Auth/Auth.module.css","components/UI/Buttons/GradientButton/GradientButton.js","components/Input/Input.js","components/Auth/Auth.js","Shared/checkValidity.js"],"names":["module","exports","GradientButton","props","className","Classes","icons","color","join","onClick","clicked","disabled","children","input","inputElement","message","inputClasses","classes","InputElement","invalid","shouldValidate","touched","push","Invalid","Message","field","elementType","elementConfig","value","onChange","changed","options","map","option","displayValue","Input","Label","label","connect","state","loading","auth","error","isAuth","token","dispatch","onAuth","email","password","isSignUp","actions","useState","type","placeholder","validation","required","isEmail","valid","element_name","minLength","controls","setControls","formIsValid","setFormIsValid","setIsSignUp","formElementArray","key","id","config","form","formElement","event","inputIdentifier","updatedControlsForm","updatedFormElement","target","rules","isValid","trim","length","maxLength","test","isNumeric","checkValidity","inputChangedHandler","Spinner","errorMessage","redirect","to","container","Auth","onSubmit","preventDefault"],"mappings":"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","file":"static/js/3.016528c5.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"icons\":\"GradientButton_icons__38WAV\",\"orange\":\"GradientButton_orange__3MH0l\",\"purple\":\"GradientButton_purple__PfJb5\",\"green\":\"GradientButton_green__2MpUf\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Input\":\"Input_Input__1FwTG\",\"Label\":\"Input_Label__vUBXH\",\"InputElement\":\"Input_InputElement__32tFP\",\"Invalid\":\"Input_Invalid__25a9-\",\"Message\":\"Input_Message__32lBN\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Auth_container__12o6L\",\"Auth\":\"Auth_Auth__bIVYM\"};","import React from 'react';\r\nimport Classes from './GradientButton.module.css';\r\n\r\nconst GradientButton = props => {\r\n    return (\r\n        <div className={[Classes.icons, Classes[props.color]].join(' ')} onClick={props.clicked} disabled={props.disabled}>\r\n            <a><div>{props.children}</div></a>\r\n        </div>\r\n\r\n    );\r\n};\r\n\r\nexport default GradientButton;","import React from 'react';\r\n\r\nimport classes from './Input.module.css';\r\n\r\nconst input = ( props ) => {\r\n    let inputElement = null;\r\n    let message = null;\r\n    const inputClasses = [classes.InputElement];\r\n\r\n    if (props.invalid && props.shouldValidate && props.touched) {\r\n        inputClasses.push(classes.Invalid);\r\n        message =<p className={classes.Message}>*please enter a valid {props.field} </p>\r\n    }\r\n\r\n    switch ( props.elementType ) {\r\n        case ( 'input' ):\r\n            inputElement = <input\r\n                className={inputClasses.join(' ')}\r\n                {...props.elementConfig}\r\n                value={props.value}\r\n                onChange={props.changed} />;\r\n            break;\r\n        case ( 'textarea' ):\r\n            inputElement = <textarea\r\n                className={inputClasses.join(' ')}\r\n                {...props.elementConfig}\r\n                value={props.value}\r\n                onChange={props.changed} />;\r\n            break;\r\n        case ( 'select' ):\r\n            inputElement = (\r\n                <select\r\n                    className={inputClasses.join(' ')}\r\n                    value={props.value}\r\n                    onChange={props.changed}>\r\n                    {props.elementConfig.options.map(option => (\r\n                        <option key={option.value} value={option.value}>\r\n                            {option.displayValue}\r\n                        </option>\r\n                    ))}\r\n                </select>\r\n            );\r\n            break;\r\n        default:\r\n            inputElement = <input\r\n                className={inputClasses.join(' ')}\r\n                {...props.elementConfig}\r\n                value={props.value}\r\n                onChange={props.changed} />;\r\n    }\r\n\r\n    return (\r\n        <div className={classes.Input}>\r\n            <label className={classes.Label}>{props.label}</label>\r\n            {inputElement}\r\n            {message}\r\n        </div>\r\n    );\r\n\r\n};\r\n\r\nexport default input;","import React, { useState } from 'react';\r\nimport GradientButton from '../../components/UI/Buttons/GradientButton/GradientButton';\r\nimport Input from '../../components/Input/Input';\r\nimport Classes from './Auth.module.css';\r\nimport * as actions from '../../store/actions/index';\r\nimport Spinner from '../../components/UI/Spinner/Spinner';\r\nimport { checkValidity } from '../../Shared/checkValidity';\r\nimport { connect } from 'react-redux';\r\nimport { Redirect } from 'react-router-dom';\r\n\r\n\r\nconst Auth = props => {\r\n\r\n    const [controls, setControls] = useState(\r\n        {\r\n            email: {\r\n                elementType: 'input',\r\n                elementConfig: {\r\n                    type: 'text',\r\n                    placeholder: 'Your Email'\r\n                },\r\n                value: '',\r\n                validation: {\r\n                    required: true,\r\n                    isEmail: true\r\n                },\r\n                valid: false,\r\n                touched: false,\r\n                element_name: \"email\"\r\n            },\r\n            password: {\r\n                elementType: 'input',\r\n                elementConfig: {\r\n                    type: 'password',\r\n                    placeholder: 'Your Password'\r\n                },\r\n                value: '',\r\n                validation: {\r\n                    required: true,\r\n                    minLength: 6\r\n                },\r\n                valid: false,\r\n                touched: false,\r\n                element_name: \"password\"\r\n            },\r\n        });\r\n\r\n\r\n    const [formIsValid, setFormIsValid] = useState(false);\r\n    const [isSignUp, setIsSignUp] = useState(true);\r\n\r\n    const inputChangedHandler = (event, inputIdentifier) => {\r\n        const updatedControlsForm = {\r\n            ...controls\r\n        };\r\n        const updatedFormElement = {\r\n            ...updatedControlsForm[inputIdentifier]\r\n        };\r\n        updatedFormElement.value = event.target.value;\r\n        updatedFormElement.valid = checkValidity(updatedFormElement.value, updatedFormElement.validation);\r\n        updatedFormElement.touched = true;\r\n        updatedControlsForm[inputIdentifier] = updatedFormElement;\r\n\r\n        let formIsValid = true;\r\n        for (let inputIdentifier in updatedControlsForm) {\r\n            formIsValid = updatedControlsForm[inputIdentifier].valid && formIsValid;\r\n        }\r\n        setControls(updatedControlsForm);\r\n        setFormIsValid(formIsValid);\r\n    };\r\n\r\n    const submitHandler = (event) => {\r\n\r\n        event.preventDefault();\r\n        props.onAuth(controls.email.value, controls.password.value, isSignUp);\r\n    };\r\n\r\n    const switchAuthModeHandler = () => {\r\n\r\n        setIsSignUp(!isSignUp);\r\n    };\r\n\r\n    const submitForm = () => {\r\n        props.onAuth(controls.email.value, controls.password.value, isSignUp);\r\n    };\r\n\r\n    const formElementArray = [];\r\n\r\n    for (let key in controls) {\r\n        formElementArray.push({ id: key, config: controls[key] });\r\n    }\r\n\r\n    let form = formElementArray.map(formElement => {\r\n        return <Input\r\n            key={formElement.id}\r\n            elementType={formElement.config.elementType}\r\n            elementConfig={formElement.config.elementConfig}\r\n            value={formElement.config.value}\r\n            invalid={!formElement.config.valid}\r\n            shouldValidate={formElement.config.validation}\r\n            touched={formElement.config.touched}\r\n            changed={(event) => inputChangedHandler(event, formElement.id)}\r\n            field={formElement.config.element_name}\r\n        />;\r\n    });\r\n\r\n    if (props.loading) {\r\n        form = <Spinner />;\r\n    }\r\n\r\n    let errorMessage = null;\r\n\r\n    if (props.error) {\r\n        if (props.error.message === \"EMAIL_EXISTS\")\r\n            errorMessage = <h4>Sorry you can't signup with this E-mail, it's already taken!</h4>;\r\n        else if (props.error.message === \"INVALID_PASSWORD\")\r\n            errorMessage = <h4>Wrong password!</h4>;\r\n        else\r\n            errorMessage = <h4>{props.error.message}</h4>;\r\n    }\r\n\r\n    let redirect = null;\r\n    // let sum = 0;\r\n    // for (let x in props.ingredients) {\r\n    //     sum = sum + props.ingredients[x];\r\n    // }\r\n\r\n    // if (props.isAuth && sum > 0) {\r\n    //     redirect = <Redirect to='/checkout' />;\r\n    // }\r\n    if (props.isAuth)\r\n        redirect = <Redirect to='/' />;\r\n\r\n    return (\r\n        <div className={Classes.container}>\r\n            {\r\n                !props.loading ?\r\n                    <div className={Classes.Auth}>\r\n                        {errorMessage}\r\n                        <form onSubmit={submitHandler} id=\"form\">\r\n                            {form}\r\n                            <GradientButton\r\n                                disabled={!formIsValid} clicked={submitForm} color=\"orange\">\r\n                                Submit\r\n                             </GradientButton>\r\n                        </form>\r\n                        <GradientButton clicked={switchAuthModeHandler} color={isSignUp?\"green\":\"purple\"}>\r\n                            Switch to {isSignUp ? 'Sign In' : 'Sign Up'}\r\n                        </GradientButton>\r\n                        {redirect}\r\n                    </div>\r\n                    :\r\n                    <Spinner />\r\n            }\r\n        </div>\r\n\r\n    );\r\n\r\n\r\n\r\n\r\n};\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        loading: state.auth.loading,\r\n        error: state.auth.error,\r\n        isAuth: state.auth.token !== null,\r\n    };\r\n};\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n        onAuth: (email, password, isSignUp) => dispatch(actions.auth(email, password, isSignUp))\r\n    };\r\n};\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Auth);\r\n","export const checkValidity= (value, rules) =>{\r\n    let isValid = true;\r\n    if (!rules) {\r\n        return true;\r\n    }\r\n    \r\n    if (rules.required) {\r\n        isValid = value.trim() !== '' && isValid;\r\n    }\r\n\r\n    if (rules.minLength) {\r\n        isValid = value.length >= rules.minLength && isValid\r\n    }\r\n\r\n    if (rules.maxLength) {\r\n        isValid = value.length <= rules.maxLength && isValid\r\n    }\r\n\r\n    if (rules.isEmail) {\r\n        const pattern = /[a-z0-9!#$%&'*+/=?^_`{|}~-]+(?:\\.[a-z0-9!#$%&'*+/=?^_`{|}~-]+)*@(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?/;\r\n        isValid = pattern.test(value) && isValid\r\n    }\r\n\r\n    if (rules.isNumeric) {\r\n        const pattern = /^\\d+$/;\r\n        isValid = pattern.test(value) && isValid\r\n    }\r\n\r\n    return isValid;\r\n}\r\n"],"sourceRoot":""}